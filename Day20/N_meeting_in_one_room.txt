Que: N meeting in one room(Easy)

Link: https://practice.geeksforgeeks.org/problems/n-meetings-in-one-room-1587115620/1#

Solution:

//constructor

class Meeting{
    
    int start = 0;
    int end = 0;
    int pos = 0;
    
    Meeting(int start, int end, int pos){
        this.start = start;
        this.end = end;
        this.pos = pos;
    }
}

//comparator function to compare

class meetingComparator implements Comparator<Meeting>{
    
    @Override
    public int compare(Meeting m1, Meeting m2){
        if(m1.end<m2.end){
            return -1;
        }else if(m1.end>m2.end){
            return 1;
        }else if(m1.pos<m2.pos){
            return -1;
        }
        return 1;
    }
}

class Solution 
{
    //Function to find the maximum number of meetings that can
    //be performed in a meeting room.
    public static int maxMeetings(int start[], int end[], int n)
    {
        // add your code here
        ArrayList<Meeting> meet = new ArrayList<>();
        
        for(int i=0; i<start.length; i++){
            meet.add(new Meeting(start[i], end[i], i+1));
        }
        
        meetingComparator mc = new meetingComparator();
        Collections.sort(meet, mc);
        
        
        ArrayList<Integer> posibleMeeting = new ArrayList<>();
        posibleMeeting.add(meet.get(0).pos);
        int meetingLimit = meet.get(0).end;
        
        for(int i=1; i<start.length; i++){
            if(meet.get(i).start > meetingLimit){
                meetingLimit = meet.get(i).end;
                posibleMeeting.add(meet.get(i).pos);
                
            }
        }
        
        return posibleMeeting.size();
    }
    
}